#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
//var debug = require('debug')('secure-camera:server');
var http = require('http');
var socketIo = require('socket.io');
var argv = require('argv')
var modelDatastore = require("../lib/model-datastore");

let deviceStatus = 'off';



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = socketIo(server);
io.on('connection', function(socket) {
    console.log('A new client is connected...');

    modelDatastore.list('Snapshot', (err, entities) => {
        if (err) {
            console.log(err)
            return;
        }

        socket.emit('load images', entities);
    }, 10, { item: "time", option: { descending: true } });

    socket.on('toggle device', function() {

        if (deviceStatus === 'on') {
            io.emit('turnOff camera')
            deviceStatus = 'off'
        } else if (deviceStatus === 'off') {
            io.emit('turnOn camera')
            deviceStatus = 'on'
        }

    })

    socket.on('change device status', function(data) {
        socket.emit('update deivce status', data);
    })

    app.setSocketIo(socket, io);
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, argv.fe_ip);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    console.log(addr.address, addr.port)
        //var bind = typeof addr === 'string' ?
        //'pipe ' + addr :
        //'port ' + addr.port;
        //debug('Listening on ' + bind);
}